gleamGrammar=function(e){let a={className:"keyword",beginKeywords:"as assert auto case const delegate derive echo else fn if implement import let macro opaque panic pub test todo type use"},n={className:"string",variants:[{begin:/"/,end:/"/}],contains:[e.BACKSLASH_ESCAPE],relevance:0},t={className:"variable",begin:"\\b[a-z][a-z0-9_]*\\b",relevance:0},i={className:"comment",begin:"\\b_[a-z][a-z0-9_]*\\b",relevance:0},s={className:"number",variants:[{begin:"\\b0[bB](?:_?[01]+)+"},{begin:"\\b0[oO](?:_?[0-7]+)+"},{begin:"\\b0[xX](?:_?[0-9a-fA-F]+)+"},{begin:"\\b\\d(?:_?\\d+)*(?:\\.(?:\\d(?:_?\\d+)*)*)?"},],relevance:0};return{name:"Gleam",aliases:["gleam"],contains:[e.C_LINE_COMMENT_MODE,n,{begin:"<<",end:">>",contains:[{className:"keyword",beginKeywords:"binary bits bytes int float bit_string bit_array bits utf8 utf16 utf32 utf8_codepoint utf16_codepoint utf32_codepoint signed unsigned big little native unit size"},a,n,t,i,s,],relevance:10},{className:"function",beginKeywords:"fn",end:"\\(",excludeEnd:!0,contains:[{className:"title",begin:"[a-z][a-z0-9_]*\\w*",relevance:0},]},{className:"attribute",begin:"@",end:"\\(",excludeEnd:!0},a,{className:"title",begin:"\\b[A-Z][A-Za-z0-9]*\\b",relevance:0},{className:"operator",begin:"[+\\-*/%!=<>&|.]+",relevance:0},t,i,s,]}};
